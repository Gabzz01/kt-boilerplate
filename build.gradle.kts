/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.14.2/samples
 */
plugins {
    kotlin("jvm")
    kotlin("plugin.serialization")
    id("com.google.devtools.ksp")
    application
    id("com.gradleup.shadow") version "8.3.2"
    id("org.owasp.dependencycheck") version "12.1.3"
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(23))
        vendor.set(JvmVendorSpec.ADOPTIUM)
    }
}

val openTelemetryVersion: String by project
val koinVersion: String by project

dependencies {

    // Project dependencies
    implementation(project(":core"))

    // Logging
    implementation("ch.qos.logback:logback-classic:1.5.13")

    // OpenTelemetry
    implementation("io.opentelemetry:opentelemetry-sdk:$openTelemetryVersion")
    implementation("io.opentelemetry:opentelemetry-extension-kotlin:$openTelemetryVersion")
    implementation("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure:$openTelemetryVersion")
    implementation("io.opentelemetry:opentelemetry-exporter-otlp:$openTelemetryVersion")
    implementation("io.opentelemetry:opentelemetry-exporter-logging:$openTelemetryVersion")
    implementation("io.opentelemetry.instrumentation:opentelemetry-logback-appender-1.0:2.10.0-alpha")

    // Tests
    testImplementation(kotlin("test"))
    testImplementation("io.insert-koin:koin-test:$koinVersion")
}

ksp {
    // See https://insert-koin.io/docs/reference/koin-annotations/start/
    arg("KOIN_CONFIG_CHECK","true")
    arg("KOIN_DEFAULT_MODULE", "false")
}

sourceSets.main {
    kotlin.srcDirs("src/main/kotlin", "build/generated/ksp/main/kotlin")
}

application {
    applicationDefaultJvmArgs = listOf(
        "-Dotel.exporter.otlp.endpoint=http://localhost:4318",
        "-Dotel.exporter.otlp.protocol=http/protobuf",
        "-Dotel.traces.exporter=otlp",
        "-Dotel.service.name=${rootProject.name}"
    )
    mainClass = "com.example.app.AppKt" // Replace with your main class
}

tasks.shadowJar {
    archiveBaseName = "app"
    archiveVersion = ""
    archiveClassifier = "fat"
}

dependencyCheck {
    failBuildOnCVSS = 7.0f
    data {
        directory = "$rootDir/.dependency-check-data"
    }
}